latest.case.date<- str_sub(strsplit(latest, '_')[[1]][1], -10, -1)
drop_download(paste0("/applications/COVID_Scraper/Daily_scraper_reports/", latest), overwrite = TRUE)
d <- read_excel(paste0(latest)); d[13, 2] <- "Scotland"
#### IMPORT MOST RECENT DEATHS ####
latest.death <- files[grep('death', files$name), ] %>% # We will use when plotting death as well
arrange(client_modified) %>%
tail(1) %>%
select(name) %>%
as.character()
latest.death.date<- str_sub(strsplit(latest.death, '_')[[1]][1], -10, -1)
drop_download(paste0("/applications/covid_scraper/daily_scraper_reports/", latest.death), overwrite = TRUE)
d.death<- as.data.frame(read_excel(paste0('SARS-Cov-2-Scotland-', latest.death.date, '_deaths_raw.xlsx'))[,-1]) %>%
filter(Date == 'Deaths_New') %>%
select(-1)
colnames(d.death)[ncol(d.death)]<- (latest.death.date)
d.death2<- d.death %>%
gather('date', 'Deaths_New', 1:ncol(d.death)) %>%
mutate(cumNumDeath = cumsum(Deaths_New)) %>%
mutate(region = 'Scotland') %>% # for plotting
arrange(date)
View(d.death2)
d.death2$cumNumDeath[nrow(d.death2)]
# FUNCTION COMPUTING Td (method 1)
# Function takes a dataframe as argument, of the form cbind(date, Number of New Cases)
compute.mu.m1<- function(dat, user.t1, user.t2){
user.t1<- as.Date(user.t1)
user.t2<- as.Date(user.t2)
dat$cumNewCases<- cumsum(dat[,2])
dat<- dat %>% filter(cumNewCases > 0)
nb.days<- as.numeric(as.Date(user.t2) - as.Date(user.t1))
user.n.t1<- dat %>% filter(date == user.t1) %>% select(cumNewCases)
user.n.t2<- dat %>% filter(date == user.t2) %>% select(cumNewCases)
Td<- round(nb.days/(log2(user.n.t2[[1]]/user.n.t1[[1]])), 3)
return(Td)
}
# FUNCTION SIMULATING DATASET
# Takes as argument: its = number of datasets to generate, df = dataframe of the form (date, numNewCases)
sim.epi<- function(df, its){
# FORMAT DATA< GET CUMULATIVE INCIDENCE
df0 <- df %>% filter(cumNumCases > 0) # trim data to first reported case
# MODIF TO MAKE:
df0$numNewCases<- c(df0$cumNumCases[1], diff(df0$cumNumCases)) # TO CHECK
#df0$numNewCases<- c(1, diff(df0$cumNumCases)) # TO CHECK
df0$date<- as.Date(df0$date)
df0$day_since_start<- c(0, cumsum(as.numeric(diff(df0$date)))) # Get date in terms of "day first case"
df0$cumIncidence<- cumsum(df0$numNewCases) # TO CHECK
df0<- cbind(df0, as.data.frame(matrix(NA, nrow = nrow(df0), ncol = its)))
for(j in 1:length(df0$numNewCases)){ # TO CHECK: this to be modified if we decide on computing mu exclding very early phase
df0[j,which(substr(colnames(df0), 1, 1) == "V")] <- rpois(n = its, lambda = df0$numNewCases[j])
}
return(df0)
}
sim.epi.death<- function(df, its){
# FORMAT DATA< GET CUMULATIVE INCIDENCE
df0 <- df %>% filter(cumNumDeath > 0) # trim data to first reported case
# MODIF TO MAKE:
df0$numNewDeaths<- c(df0$cumNumDeath[1], diff(df0$cumNumDeath)) # TO CHECK
#df0$numNewCases<- c(1, diff(df0$cumNumCases)) # TO CHECK
df0$date<- as.Date(df0$date)
df0$day_since_start<- c(0, cumsum(as.numeric(diff(df0$date)))) # Get date in terms of "day first case"
#df0$cumIncidence<- cumsum(df0$numNewCases) # TO CHECK
# SIMULATE DATASETS
# Each timepoint, draw a number of new cases from a poisson distribution of mean the number of new reported cases for that day in the observed data.
# Directly append the simulated data to dataframe for easier plotting after
df0<- cbind(df0, as.data.frame(matrix(NA, nrow = nrow(df0), ncol = its)))
for(j in 1:length(df0$numNewDeaths)){
df0[j,which(substr(colnames(df0), 1, 1) == "V")]<- rpois(n = its, lambda = df0$numNewDeaths[j])
}
return(df0)
}
d.death2<- d.death %>%
gather('date', 'Deaths_New', 1:ncol(d.death)) %>%
mutate(cumNumDeath = cumsum(Deaths_New)) %>%
mutate(region = 'Scotland') %>% # for plotting
arrange(date)
input <- data.frame("healthboard" = "Scotland")
d.death2<- d.death %>%
gather('date', 'Deaths_New', 1:ncol(d.death)) %>%
mutate(cumNumDeath = cumsum(Deaths_New)) %>%
mutate(region = 'Scotland') %>% # for plotting
arrange(date)
d2<- as.data.frame(
d %>%
filter(Health_Board == input$healthboard) %>% # Get correct row
select(-c(1,2, ncol(d)-1, ncol(d))))
View(d2)
d.death2<- d.death %>%
gather('date', 'Deaths_New', 1:ncol(d.death)) %>%
mutate(cumNumDeath = cumsum(Deaths_New)) %>%
mutate(region = 'Scotland') %>% # for plotting
arrange(date)
d2<- as.data.frame(
d %>%
filter(Health_Board == input$healthboard) %>% # Get correct row
select(-c(1,2, ncol(d)-1, ncol(d))))
colnames(d2)[ncol(d2)]<- (latest.case.date)
View(d2)
d2<- d2 %>%
gather('date', 'cumNumCases', 1:ncol(d2)) %>%
mutate(region = input$healthboard) %>% # Needed for plotting with ggplot
arrange(date)
View(d2)
combdeathcase <- rbind(d2,
data.frame("date" = d.death2$date,
"cumNumCases" = d.death2$cumNumDeath,
"region" = "deaths"))
combdeathcase$date <- as.Date(combdeathcase$date)
ggplot(combdeathcase, aes(x = as.Date(date), y = cumNumCases, col = region)) +
geom_line(size = 1.1)+ xlab('') + ylab('Cumulative Number of Cases/Deaths') +
scale_y_continuous(expand = c(0,0)) +
ggtitle(paste0('COVID-19 in ', input$healthboard))+
theme_bw()+
scale_color_manual(values=c("black", "red"),
breaks=c("Scotland", "deaths"),
labels=c("Cases", "Deaths")) +
theme(legend.position="bottom", legend.title = element_blank(),
legend.text = element_text(size=12, face="bold"),
panel.border= element_blank(),
axis.text.y = element_text(face="bold", colour="black", size=10),
axis.text.x = element_text(face="bold", colour="black", size=10, angle = 45, vjust=1, hjust=1),
axis.title.y = element_text(face="bold", colour="black", size=11),
axis.title.x = element_text(face="bold", colour="black", size=11),
axis.line.y = element_line(color="black", size = 0.5),
axis.line.x = element_line(color="black", size = 0.5),
plot.title = element_text(lineheight=.8, face="bold", hjust = 0.5)) +
annotate("rect", xmin = as.Date(input$date-7),
xmax = as.Date(input$date), ymin = 0, ymax = max(d2$cumNumCases), fill = "lightblue", alpha = .3) +
geom_vline(xintercept = as.Date("2020-03-13"), color = "black", linetype = "dashed", size = 1)
input <- data.frame("healthboard" = "Scotland"
"date" = "2020-03-26")
input <- data.frame("healthboard" = "Scotland",
"date" = "2020-03-26")
ggplot(combdeathcase, aes(x = as.Date(date), y = cumNumCases, col = region)) +
geom_line(size = 1.1)+ xlab('') + ylab('Cumulative Number of Cases/Deaths') +
scale_y_continuous(expand = c(0,0)) +
ggtitle(paste0('COVID-19 in ', input$healthboard))+
theme_bw()+
scale_color_manual(values=c("black", "red"),
breaks=c("Scotland", "deaths"),
labels=c("Cases", "Deaths")) +
theme(legend.position="bottom", legend.title = element_blank(),
legend.text = element_text(size=12, face="bold"),
panel.border= element_blank(),
axis.text.y = element_text(face="bold", colour="black", size=10),
axis.text.x = element_text(face="bold", colour="black", size=10, angle = 45, vjust=1, hjust=1),
axis.title.y = element_text(face="bold", colour="black", size=11),
axis.title.x = element_text(face="bold", colour="black", size=11),
axis.line.y = element_line(color="black", size = 0.5),
axis.line.x = element_line(color="black", size = 0.5),
plot.title = element_text(lineheight=.8, face="bold", hjust = 0.5)) +
annotate("rect", xmin = as.Date(input$date-7),
xmax = as.Date(input$date), ymin = 0, ymax = max(d2$cumNumCases), fill = "lightblue", alpha = .3) +
geom_vline(xintercept = as.Date("2020-03-13"), color = "black", linetype = "dashed", size = 1)
input$date-7
input <- data.frame("healthboard" = "Scotland",
"date" = as.character("2020-03-26"))
input$date
input$date-7
as.Date(input$date)-7
ggplot(combdeathcase, aes(x = as.Date(date), y = cumNumCases, col = region)) +
geom_line(size = 1.1)+ xlab('') + ylab('Cumulative Number of Cases/Deaths') +
scale_y_continuous(expand = c(0,0)) +
ggtitle(paste0('COVID-19 in ', input$healthboard))+
theme_bw()+
scale_color_manual(values=c("black", "red"),
breaks=c("Scotland", "deaths"),
labels=c("Cases", "Deaths")) +
theme(legend.position="bottom", legend.title = element_blank(),
legend.text = element_text(size=12, face="bold"),
panel.border= element_blank(),
axis.text.y = element_text(face="bold", colour="black", size=10),
axis.text.x = element_text(face="bold", colour="black", size=10, angle = 45, vjust=1, hjust=1),
axis.title.y = element_text(face="bold", colour="black", size=11),
axis.title.x = element_text(face="bold", colour="black", size=11),
axis.line.y = element_line(color="black", size = 0.5),
axis.line.x = element_line(color="black", size = 0.5),
plot.title = element_text(lineheight=.8, face="bold", hjust = 0.5)) +
annotate("rect", xmin = as.Date(input$date)-7,
xmax = as.Date(input$date), ymin = 0, ymax = max(d2$cumNumCases), fill = "lightblue", alpha = .3) +
geom_vline(xintercept = as.Date("2020-03-13"), color = "black", linetype = "dashed", size = 1)
d$pop <- c(
369670, #Ayrshire
371910, #Fife
306070, #Forth Valley
584550, #Grampian
1174980, #Greater Glasgow and Clyde
659200, #Lanarkshire
897770, #Lothian
22990, #Shetland
416080, #Tayside
115270, #Borders
321800, #Highland
148790, #Dumfries and Galloway
5438100) #Scotland
dprev <- d
dprev[,-c(1:2,(ncol(dprev)-2):ncol(dprev))] <- (dprev[,-c(1:2,(ncol(dprev)-2):ncol(dprev))]/d$pop)*10000
d.keepall<- as.data.frame(dprev) %>%
select(-c(1, ncol(dprev)-1:2, ncol(dprev)))
colnames(d.keepall)[ncol(d.keepall)]<- as.character(as.Date(colnames(d.keepall)[ncol(d.keepall)-1])+1)
d.keepall<- d.keepall %>%
gather('date', 'cumNumCases', 2:ncol(d.keepall)) %>%
arrange(date)
d.keepall.dyn <- highlight_key(d.keepall, ~Health_Board )
p <- ggplot(d.keepall.dyn, aes(x = as.Date(date), y = cumNumCases, group = Health_Board))+
geom_line(size = 0.8)+ xlab('') + ylab('Cases per 10,000 Population')+
#ggtitle(paste0('COVID in ', user.input.region))+
theme_bw()+
theme(#legend.position="none",
panel.border= element_blank(),
axis.text.y = element_text(face="bold", colour="black", size=8),
axis.text.x = element_text(face="bold", colour="black", size=8, angle = 45, vjust=1, hjust=1),
axis.title.y = element_text(face="bold", colour="black", size=8),
axis.title.x = element_text(face="bold", colour="black", size=8),
axis.line.y = element_line(color="black", size = 0.5),
axis.line.x = element_line(color="black", size = 0.5),
plot.title = element_text(lineheight=.8, face="bold", hjust = 0.5))
gg <- ggplotly(p, tooltip = "Health_Board" )
highlight(gg,
on = "plotly_hover", off = "plotly_deselect",
color = "black")
d2<- as.data.frame(
d %>%
filter(Health_Board == input$healthboard) %>% # Get correct row
select(-c(1,2, ncol(d)-1, ncol(d))))
View(d2)
d2<- as.data.frame(
d %>%
filter(Health_Board == input$healthboard) %>% # Get correct row
select(-c(1,2, ncol(d)-1:2, ncol(d))))
View(d)
View(d2)
colnames(d2)[ncol(d2)]<- (latest) # latest day does not have a colname
d2<- d2 %>%
gather('date', 'cumNumCases', 1:ncol(d2)) %>%
mutate(region = input$healthboard) %>% # Needed for plotting with ggplot
arrange(date)
# APPLY FUNCTION TO COMPUTE TD OVER OBSERVED DATASET
d2.2<- d2 %>%
mutate(numNewCases = c(cumNumCases[1], diff(cumNumCases))) %>%
select(date, numNewCases)
td.obs<- compute.mu.m1(d2.2, user.t1 = input$date-7, user.t2 = input$date)
paste0("Doubling time: ", td.obs, ' for ', input$healthboard," between ", input$date-7, " and ", input$date)
# SIMULATE DATA
d2.3<- sim.epi(d2, 1000)
Tds<- NULL
sim.indices<- which(substr(colnames(d2.3), 1, 1) == 'V') # Get indices of columns corresponding to simulated datasets
for(i in 1:length(sim.indices)){
Tds<- c(Tds, compute.mu.m1(d2.3[,c(1,sim.indices[i])], user.t1 = input$date-7, user.t2 = input$date))
}
input <- data.frame("healthboard" = "Scotland",
"date" = as.Date("2020-03-26"))
ggplot(combdeathcase, aes(x = as.Date(date), y = cumNumCases, col = region)) +
geom_line(size = 1.1)+ xlab('') + ylab('Cumulative Number of Cases/Deaths') +
scale_y_continuous(expand = c(0,0)) +
ggtitle(paste0('COVID-19 in ', input$healthboard))+
theme_bw()+
scale_color_manual(values=c("black", "red"),
breaks=c("Scotland", "deaths"),
labels=c("Cases", "Deaths")) +
theme(legend.position="bottom", legend.title = element_blank(),
legend.text = element_text(size=12, face="bold"),
panel.border= element_blank(),
axis.text.y = element_text(face="bold", colour="black", size=10),
axis.text.x = element_text(face="bold", colour="black", size=10, angle = 45, vjust=1, hjust=1),
axis.title.y = element_text(face="bold", colour="black", size=11),
axis.title.x = element_text(face="bold", colour="black", size=11),
axis.line.y = element_line(color="black", size = 0.5),
axis.line.x = element_line(color="black", size = 0.5),
plot.title = element_text(lineheight=.8, face="bold", hjust = 0.5)) +
annotate("rect", xmin = input$date-7,
xmax = input$date, ymin = 0, ymax = max(d2$cumNumCases), fill = "lightblue", alpha = .3) +
geom_vline(xintercept = as.Date("2020-03-13"), color = "black", linetype = "dashed", size = 1)
d2<- as.data.frame(
d %>%
filter(Health_Board == input$healthboard) %>% # Get correct row
select(-c(1,2, ncol(d)-1:2, ncol(d))))
colnames(d2)[ncol(d2)]<- (latest) # latest day does not have a colname
d2<- d2 %>%
gather('date', 'cumNumCases', 1:ncol(d2)) %>%
mutate(region = input$healthboard) %>% # Needed for plotting with ggplot
arrange(date)
# APPLY FUNCTION TO COMPUTE TD OVER OBSERVED DATASET
d2.2<- d2 %>%
mutate(numNewCases = c(cumNumCases[1], diff(cumNumCases))) %>%
select(date, numNewCases)
View(d2.2)
d2<- as.data.frame(
d %>%
filter(Health_Board == input$healthboard) %>% # Get correct row
select(-c(1,2, ncol(d)-1:2, ncol(d))))
colnames(d2)[ncol(d2)]<- (latest.case.date) # latest day does not have a colname
d2<- d2 %>%
gather('date', 'cumNumCases', 1:ncol(d2)) %>%
mutate(region = input$healthboard) %>% # Needed for plotting with ggplot
arrange(date)
# APPLY FUNCTION TO COMPUTE TD OVER OBSERVED DATASET
d2.2<- d2 %>%
mutate(numNewCases = c(cumNumCases[1], diff(cumNumCases))) %>%
select(date, numNewCases)
View(d2.2)
td.obs<- compute.mu.m1(d2.2, user.t1 = input$date-7, user.t2 = input$date)
paste0("Doubling time: ", td.obs, ' for ', input$healthboard," between ", input$date-7, " and ", input$date)
d2.3<- sim.epi(d2, 1000)
Tds<- NULL
sim.indices<- which(substr(colnames(d2.3), 1, 1) == 'V') # Get indices of columns corresponding to simulated datasets
for(i in 1:length(sim.indices)){
Tds<- c(Tds, compute.mu.m1(d2.3[,c(1,sim.indices[i])], user.t1 = input$date-7, user.t2 = input$date))
}
rm(list=ls())
library(readxl); library(ggplot2); library(dplyr); library(tidyr); library(rdrop2); library(Rmisc); library(lubridate); library(plotly)
input <- data.frame("healthboard" = "Scotland",
"date" = as.Date("2020-03-26"))
#### IMPORT MOST RECENT CASES ####
drop_auth(rdstoken = 'tokenfile_NEW.RDS')
files<- drop_dir('/applications/covid_scraper/daily_scraper_reports')
latest <- files[-(grep('death', files$name)), ] %>%
arrange(client_modified) %>%
tail(1) %>%
select(name) %>%
as.character()
latest.case.date<- str_sub(strsplit(latest, '_')[[1]][1], -10, -1)
drop_download(paste0("/applications/COVID_Scraper/Daily_scraper_reports/", latest), overwrite = TRUE)
d <- read_excel(paste0(latest)); d[13, 2] <- "Scotland"
rm(list=ls())
library(readxl); library(ggplot2); library(dplyr); library(tidyr); library(rdrop2); library(Rmisc); library(lubridate); library(plotly)
input <- data.frame("healthboard" = "Scotland",
"date" = as.Date("2020-03-26"))
#### IMPORT MOST RECENT CASES ####
drop_auth(rdstoken = 'tokenfile_NEW.RDS')
files<- drop_dir('/applications/covid_scraper/daily_scraper_reports')
latest <- files[-(grep('death', files$name)), ] %>%
arrange(client_modified) %>%
tail(1) %>%
select(name) %>%
as.character()
latest.case.date<- str_sub(strsplit(latest, '_')[[1]][1], -10, -1)
drop_download(paste0("/applications/COVID_Scraper/Daily_scraper_reports/", latest), overwrite = TRUE)
d <- read_excel(paste0(latest)); d[13, 2] <- "Scotland"
d2<- as.data.frame(
d %>%
filter(Health_Board == input$healthboard) %>% # Get correct row
select(-c(1,2, ncol(d)-1:2, ncol(d))))
colnames(d2)[ncol(d2)]<- (latest.case.date) # latest day does not have a colname
d2<- d2 %>%
gather('date', 'cumNumCases', 1:ncol(d2)) %>%
mutate(region = input$healthboard) %>% # Needed for plotting with ggplot
arrange(date)
# APPLY FUNCTION TO COMPUTE TD OVER OBSERVED DATASET
d2.2<- d2 %>%
mutate(numNewCases = c(cumNumCases[1], diff(cumNumCases))) %>%
select(date, numNewCases)
td.obs<- compute.mu.m1(d2.2, user.t1 = input$date-7, user.t2 = input$date)
df <- d2
View(df)
df0 <- df %>% filter(cumNumCases > 0)
View(df0)
df0$numNewCases<- c(df0$cumNumCases[1], diff(df0$cumNumCases))
View(df0)
df0$date<- as.Date(df0$date)
df0$day_since_start<- c(0, cumsum(as.numeric(diff(df0$date))))
df0$cumIncidence<- cumsum(df0$numNewCases)
df0$cumIncidence<- cumsum(df0$numNewCases) # TO CHECK
df0<- cbind(df0, as.data.frame(matrix(NA, nrow = nrow(df0), ncol = 1000)))
for(j in 1:length(df0$numNewCases)){ # TO CHECK: this to be modified if we decide on computing mu exclding very early phase
df0[j,which(substr(colnames(df0), 1, 1) == "V")] <- rpois(n = 1000, lambda = df0$numNewCases[j])
}
View(df0)
rm(list=ls())
library(readxl); library(ggplot2); library(dplyr); library(tidyr); library(rdrop2); library(Rmisc); library(lubridate); library(plotly)
input <- data.frame("healthboard" = "Scotland",
"date" = as.Date("2020-03-26"))
#### IMPORT MOST RECENT CASES ####
drop_auth(rdstoken = 'tokenfile_NEW.RDS')
files<- drop_dir('/applications/covid_scraper/daily_scraper_reports')
latest <- files[-(grep('death', files$name)), ] %>%
arrange(client_modified) %>%
tail(1) %>%
select(name) %>%
as.character()
latest.case.date<- str_sub(strsplit(latest, '_')[[1]][1], -10, -1)
drop_download(paste0("/applications/COVID_Scraper/Daily_scraper_reports/", latest), overwrite = TRUE)
d <- read_excel(paste0(latest)); d[13, 2] <- "Scotland"
d2<- as.data.frame(
d %>%
filter(Health_Board == input$healthboard) %>% # Get correct row
select(-c(1,2, ncol(d)-1:2, ncol(d))))
colnames(d2)[ncol(d2)]<- (latest.case.date) # latest day does not have a colname
d2<- d2 %>%
gather('date', 'cumNumCases', 1:ncol(d2)) %>%
mutate(region = input$healthboard) %>% # Needed for plotting with ggplot
arrange(date)
# APPLY FUNCTION TO COMPUTE TD OVER OBSERVED DATASET
d2.2<- d2 %>%
mutate(numNewCases = c(cumNumCases[1], diff(cumNumCases))) %>%
select(date, numNewCases)
df <- d2
# FORMAT DATA< GET CUMULATIVE INCIDENCE
df0 <- df %>% filter(cumNumCases > 0) # trim data to first reported case
# MODIF TO MAKE:
df0$numNewCases<- c(df0$cumNumCases[1], diff(df0$cumNumCases)) # to add a cumulative new cases
#df0$numNewCases<- c(1, diff(df0$cumNumCases)) # TO CHECK
df0$date<- as.Date(df0$date) # making sure all the character dates are actually dates
df0$day_since_start<- c(0, cumsum(as.numeric(diff(df0$date)))) # Get date in terms of "day first case"
df0$cumIncidence<- cumsum(df0$numNewCases) # TO CHECK
df0<- cbind(df0, as.data.frame(matrix(NA, nrow = nrow(df0), ncol = 1000))) # initialise the dataframe
for(j in 1:length(df0$numNewCases)){ # TO CHECK: this to be modified if we decide on computing mu exclding very early phase
df0[j,which(substr(colnames(df0), 1, 1) == "V")] <- rpois(n = 1000, lambda = df0$numNewCases[j])
}
d2.3<- sim.epi(d2, 1000)
sim.epi<- function(df, its){
# FORMAT DATA< GET CUMULATIVE INCIDENCE
df0 <- df %>% filter(cumNumCases > 0) # trim data to first reported case
# MODIF TO MAKE:
df0$numNewCases<- c(df0$cumNumCases[1], diff(df0$cumNumCases)) # to add a cumulative new cases
#df0$numNewCases<- c(1, diff(df0$cumNumCases)) # TO CHECK
df0$date<- as.Date(df0$date) # making sure all the character dates are actually dates
df0$day_since_start<- c(0, cumsum(as.numeric(diff(df0$date)))) # Get date in terms of "day first case"
df0$cumIncidence<- cumsum(df0$numNewCases) # TO CHECK
df0<- cbind(df0, as.data.frame(matrix(NA, nrow = nrow(df0), ncol = its))) # initialise the dataframe
for(j in 1:length(df0$numNewCases)){ # TO CHECK: this to be modified if we decide on computing mu exclding very early phase
df0[j,which(substr(colnames(df0), 1, 1) == "V")] <- rpois(n = its, lambda = df0$numNewCases[j])
}
return(df0)
}
# SIMULATE DATA
d2.3<- sim.epi(d2, 1000)
View(d2.3)
d2.3 <- df0
sim.indices<- which(substr(colnames(d2.3), 1, 1) == 'V') # Get indices of columns corresponding to simulated datasets
which(substr(colnames(d2.3), 1, 1) == 'V')
# for 1006
for(i in 1:length(sim.indices)){
Tds <- c(Tds, compute.mu.m1(d2.3[,c(1,sim.indices[i])], user.t1 = input$date-7, user.t2 = input$date))
}
Tds<- NULL
for(i in 1:length(sim.indices)){
Tds <- c(Tds, compute.mu.m1(d2.3[,c(1,sim.indices[i])], user.t1 = input$date-7, user.t2 = input$date))
}
compute.mu.m1<- function(dat, user.t1, user.t2){
user.t1<- as.Date(user.t1)
user.t2<- as.Date(user.t2)
dat$cumNewCases<- cumsum(dat[,2])
dat<- dat %>% filter(cumNewCases > 0)
nb.days<- as.numeric(as.Date(user.t2) - as.Date(user.t1))
user.n.t1<- dat %>% filter(date == user.t1) %>% select(cumNewCases)
user.n.t2<- dat %>% filter(date == user.t2) %>% select(cumNewCases)
Td<- round(nb.days/(log2(user.n.t2[[1]]/user.n.t1[[1]])), 3)
return(Td)
}
for(i in 1:length(sim.indices)){
Tds <- c(Tds, compute.mu.m1(d2.3[,c(1,sim.indices[i])], user.t1 = input$date-7, user.t2 = input$date))
}
rm(list=ls())
library(readxl); library(ggplot2); library(dplyr); library(tidyr); library(rdrop2); library(Rmisc); library(lubridate); library(plotly)
# Function takes a dataframe as argument, of the form cbind(date, Number of New Cases)
compute.mu.m1<- function(dat, user.t1, user.t2){
user.t1<- as.Date(user.t1)
user.t2<- as.Date(user.t2)
dat$cumNewCases<- cumsum(dat[,2])
dat<- dat %>% filter(cumNewCases > 0)
nb.days<- as.numeric(as.Date(user.t2) - as.Date(user.t1))
user.n.t1<- dat %>% filter(date == user.t1) %>% select(cumNewCases)
user.n.t2<- dat %>% filter(date == user.t2) %>% select(cumNewCases)
Td<- round(nb.days/(log2(user.n.t2[[1]]/user.n.t1[[1]])), 3)
return(Td)
}
sim.epi<- function(df, its){
# FORMAT DATA< GET CUMULATIVE INCIDENCE
df0 <- df %>% filter(cumNumCases > 0) # trim data to first reported case
# MODIF TO MAKE:
df0$numNewCases<- c(df0$cumNumCases[1], diff(df0$cumNumCases)) # to add a cumulative new cases
#df0$numNewCases<- c(1, diff(df0$cumNumCases)) # TO CHECK
df0$date<- as.Date(df0$date) # making sure all the character dates are actually dates
df0$day_since_start<- c(0, cumsum(as.numeric(diff(df0$date)))) # Get date in terms of "day first case"
df0$cumIncidence<- cumsum(df0$numNewCases) # TO CHECK
df0<- cbind(df0, as.data.frame(matrix(NA, nrow = nrow(df0), ncol = its))) # initialise the dataframe
for(j in 1:length(df0$numNewCases)){ # TO CHECK: this to be modified if we decide on computing mu exclding very early phase
df0[j,which(substr(colnames(df0), 1, 1) == "V")] <- rpois(n = its, lambda = df0$numNewCases[j])
}
return(df0)
}
input <- data.frame("healthboard" = "Scotland",
"date" = as.Date("2020-03-26"))
#### IMPORT MOST RECENT CASES ####
drop_auth(rdstoken = 'tokenfile_NEW.RDS')
files<- drop_dir('/applications/covid_scraper/daily_scraper_reports')
latest <- files[-(grep('death', files$name)), ] %>%
arrange(client_modified) %>%
tail(1) %>%
select(name) %>%
as.character()
latest.case.date<- str_sub(strsplit(latest, '_')[[1]][1], -10, -1)
drop_download(paste0("/applications/COVID_Scraper/Daily_scraper_reports/", latest), overwrite = TRUE)
d <- read_excel(paste0(latest)); d[13, 2] <- "Scotland"
#### Data Manipulation ####
d2<- as.data.frame(
d %>%
filter(Health_Board == input$healthboard) %>% # Get correct row
select(-c(1,2, ncol(d)-1:2, ncol(d))))
colnames(d2)[ncol(d2)]<- (latest.case.date) # latest day does not have a colname
d2<- d2 %>%
gather('date', 'cumNumCases', 1:ncol(d2)) %>%
mutate(region = input$healthboard) %>% # Needed for plotting with ggplot
arrange(date)
d2.3<- sim.epi(d2, 1000)
Tds<- NULL
sim.indices<- which(substr(colnames(d2.3), 1, 1) == 'V') # Get indices of columns corresponding to simulated datasets
Tds
for(i in 1:length(sim.indices)){
Tds <- c(Tds, compute.mu.m1(d2.3[,c(1,sim.indices[i])], user.t1 = input$date-7, user.t2 = input$date))
}
Tds
