install.packages("scales")
install.packages("scales")
library(scale)
library("scale")
library(scales)
library(scales)
show_col(viridis_pal()(5))
show_col(viridis_pal()(6))
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr")
rm(list=ls())
setwd("C:/Users/amorg/Documents/PhD/nCoV Work/Figures/WriteUpAnalysis")
# Generic Model Functions ----------------------------------------------------------
#Function for the generation time - a function of R0 and the doubling time
GenTime <- function(T2, R0) {
G = T2 * ((R0-1)/log(2))
return(G)
}
#Function to determine Beta(t) for each of the 5 scenarios
combbeta <- function(scen, time, tstart, t_dur, cmin) {
gamma <- 1/GenTime(3, 2.8)
betascale <- (2.8*gamma)*0.7
if(scen == 0) {
output <- betascale
}
if(scen == 1) {
output <- ifelse((time >= tstart & time <= tstart + t_dur),
betascale*cmin, betascale)
}
if(scen == 2) {
cminfun <- approxfun(x=c(tstart, (tstart + t_dur)), y= c(cmin, 1), method="linear", rule =2)
output <- ifelse((time >= tstart & time <= tstart + t_dur),
cminfun(time)*betascale,
betascale)
}
if(scen == 3) {
cminfun <- approxfun(x=c(tstart, (tstart + t_dur)), y= c(1, cmin), method="linear", rule =2)
output <- ifelse((time >= tstart & time <= tstart + t_dur),
cminfun(time)*betascale,
betascale)
}
if(scen == 4) {
cminfun <-approxfun(x=c(tstart, tstart+(t_dur/2), tstart+t_dur), y= c(1, cmin, 1), method="linear", rule =2)
output <- ifelse((time >= tstart & time <= tstart + t_dur),
cminfun(time)*betascale, betascale)
}
if(scen == 5) {
output <- ifelse((time >= tstart & time <= tstart+(t_dur*0.16667)) | (time >= tstart+(t_dur*0.3333) & time <= tstart+(t_dur*0.5)) |
(time >= tstart+(t_dur*0.6667) & time <= tstart+(t_dur*0.83333)),
betascale*cmin, betascale)
}
return(output)
}
#Test Plotting of the Betas
plot(seq(0,400),combbeta(5, seq(0,400), 12, 24*7, 0.4))
#ODE equations - SIR model with Beta(t) defined
SIR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
beta <- combbeta(scen, time, tstart, t_dur, cmin)
dS = - beta*S*(I)
dI = beta*S*(I)- gamma*I
dR = gamma*I
dC = beta*S*I
return(list(c(dS, dI, dR, dC)))
})
}
# Epidemic Trajectory Plots for the 5 NPI scenarios -----------------------------------
#Initial Conditions and Parameters
init <- c(S = 0.99999, I = 0.00001, R = 0, C = 0)
times <- seq(0,400,by = 1)
parms = c(gamma = 1/GenTime(3, 2.8),
scen = 0,
tstart = 52,
t_dur = 12*7,
cmin = 0.4)
#Initializing the Empty List
datalist <- list()
#For Loop to run the 5 NPI scenarios and create plots with I(t), Beta(t) and Re(t)
for(j in 1:length(seq(1,5))) { #Run for each of the 5 scenarios
datalist[[j]] <- local({
j=j
data <- data.frame(matrix(nrow = 9, ncol = 0)) #Empty dataframe to store the data from the model runs
explor_scen <- c(0, seq(1,5)[j]) #Each scenario run needs to run the unmitigated scenario (0) and the explroed scenario
for(i in 1:2) { #Run the model for unmitigated and NPI scenarios
parms["scen"] <- explor_scen[i]
if(parms["scen"] != 0 && parms["scen"] != 1) { #For all scenarios which are not 1, double the baseline NPI duration
parms["t_dur"] = 24*7
}
#Run the model and store/calculate important run characteristics
out <- cbind(data.frame(ode(y = init, func = SIR, times = times, parms = parms)),
"group" =  c("baseline", "scenario")[i],
"beta" = combbeta(explor_scen[i], times, parms[["tstart"]], parms[["t_dur"]], parms[["cmin"]]))
out$re <- out$beta/parms[["gamma"]]*out$S
data <- rbind(data, out)
}
#Convert the dataframe into a suitable format for the model plotting
plotdata <- melt(data, id.vars = c("time", "group"), measure.vars = ("I"))
plotbeta <- melt(data, id.vars = c("time", "group"), measure.vars = ("beta"))
plotre <- melt(data, id.vars = c("time", "group"), measure.vars = ("re"))
#Identify the model outcome measures (to 3 dp)
peak <- round(max(out$I), 3); cum <- round(max(out$C), 3)
#Text that should be plotted on the trajectyory plots defined here
datatext <- data.frame(x = c(200, 200), y = c(0.1875, 0.163), label = c( paste0("italic(I)[italic(max)]", " ==", peak),
paste0("italic(I)[italic(c)](italic(t)[italic(max)])", " ==", cum)))
#Plotting the common characteristics of the epidemic trajectory plot, beta(t) and re(t) plots
p1 <- ggplot(data = plotdata, aes(x = time, y = value, color = group, alpha= group)) + theme_bw() +
scale_y_continuous(limits = c(0, 0.2),expand = c(0,0)) + scale_x_continuous( expand = c(0, 0)) +
scale_alpha_manual(values = c(0.35, 1)) + scale_color_manual(values = c("darkred", "darkred"))
p2 <- ggplot(plotbeta, aes(x = time, y = value, col = group, alpha= group)) + theme_bw() + scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(limits = c(0 , 0.3), expand = c(0,0)) + geom_line(size = 1.1, stat = "identity") +
scale_alpha_manual(values = c(0.35, 1)) + scale_color_manual(values = c("darkblue", "darkblue"))
p3 <- ggplot(plotre, aes(x = time, y = value, col = group, alpha= group)) + theme_bw() + scale_x_continuous(expand = c(0,0)) +
geom_hline(yintercept = 1, size = 1.1, lty = 2, col = "black") + geom_line(size = 1.02, stat = "identity") +
scale_alpha_manual(values = c(0.35,1)) + scale_color_manual(values = c("darkblue", "darkblue"))
#Shading the period where the intervention is occurring
shade <- data.frame(xmin =  parms[["tstart"]], xmax = parms[["tstart"]]+(parms[["t_dur"]]), ymin = 0, ymax = Inf)
#Specifying the scenario specific plotting parameters - fairly long as each plotting pane needs specific alterations (axis and text wise)
if(parms[["scen"]]  == 1) {
p1 <- p1 + geom_rect(data = shade, inherit.aes = F, aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax), alpha = 0.2,
fill = "darkblue") + geom_line(size = 1.1, stat = "identity") + labs(x =NULL, y = "Prevalence", col = "", title = "Scenario 1") +
theme(axis.title.y=element_text(size=18), plot.title = element_text(size = 20, vjust = 3, hjust = 0.5, face = "bold"),
axis.text.x=element_blank(),axis.text.y=element_text(size=15), plot.margin=unit(c(0.4,0.4,0.4,0.4),"cm")) +
geom_label(data= datatext, inherit.aes = F, aes(x = x, y = y, label = label), size = 5.5, col = "black", parse = TRUE, fontface = "bold", fill = "white")
p2 <- p2 + theme(axis.title.y=element_text(size=18), axis.text.x=element_blank(), axis.text.y=element_text(size=15),
plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x =NULL, y = expression(beta(t)), col = "")
p3 <- p3 + theme(axis.text=element_text(size=15), axis.title.y=element_text(size=18), axis.title.x = element_text(size=18),
plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x ="Time (Days)", y = expression(R[e](t)), col = "")
}
if(parms[["scen"]] == 2) {
p1 <- p1 + geom_rect(data = shade, inherit.aes = F, aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax), alpha = 0.2,
fill = "darkblue") + geom_line(size = 1.1, stat = "identity") + labs(x =NULL, y = NULL, col = "", title = "Scenario 2") +
theme(plot.title = element_text(size = 20, vjust = 3, hjust = 0.5, face = "bold"),
axis.text.x=element_blank(), axis.text.y=element_blank(), plot.margin=unit(c(0.4,0.4,0.4,0.4),"cm")) +
geom_label(data= datatext, inherit.aes = F, aes(x = x, y = y, label = label), size = 5.5, col = "black", parse = TRUE, fontface = "bold", fill = "white")
p2 <- p2 + theme(axis.text=element_blank(), plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x =NULL, y = NULL, col = "")
p3 <- p3 + theme(axis.text.x =element_text(size=15), axis.text.y=element_blank(), axis.title.x = element_text(size=18),
plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x ="Time (Days)", y = NULL, col = "")
}
if(parms[["scen"]]  == 3) {
p1 <- p1 + geom_rect(data = shade, inherit.aes = F, aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax), alpha = 0.2,
fill = "darkblue") + geom_line(size = 1.1, stat = "identity") + labs(x =NULL, y = NULL, col = "", title = "Scenario 3") +
theme(plot.title = element_text(size = 20, vjust = 3, hjust = 0.5, face = "bold"),
axis.text.x=element_blank(), axis.text.y=element_blank(), plot.margin=unit(c(0.4,0.4,0.4,0.4),"cm")) +
geom_label(data= datatext, inherit.aes = F, aes(x = x, y = y, label = label), size = 5.5, col = "black", parse = TRUE, fontface = "bold", fill = "white")
p2 <- p2 + theme(axis.text=element_blank(), plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x =NULL, y = NULL, col = "")
p3 <- p3 + theme(axis.text.x =element_text(size=15), axis.text.y=element_blank(), axis.title.x = element_text(size=18),
plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x ="Time (Days)", y = NULL, col = "")
}
if(parms[["scen"]]  == 4) {
p1 <- p1 + geom_rect(data = shade, inherit.aes = F, aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax), alpha = 0.2,
fill = "darkblue") + geom_line(size = 1.1, stat = "identity") + labs(x =NULL, y = NULL, col = "", title = "Scenario 4") +
theme(plot.title = element_text(size = 20, vjust = 3, hjust = 0.5, face = "bold"),
axis.text.x=element_blank(), axis.text.y=element_blank(), plot.margin=unit(c(0.4,0.4,0.4,0.4),"cm")) +
geom_label(data= datatext, inherit.aes = F, aes(x = x, y = y, label = label), size = 5.5, col = "black", parse = TRUE, fontface = "bold", fill = "white")
p2 <- p2 + theme(axis.text=element_blank(), plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x =NULL, y = NULL, col = "")
p3 <- p3 + theme(axis.text.x =element_text(size=15), axis.text.y=element_blank(), axis.title.x = element_text(size=18),
plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x ="Time (Days)", y = NULL, col = "")
}
if(parms[["scen"]]  == 5) {
shade5 <- data.frame(xmin =  c(parms[["tstart"]], parms[["tstart"]]+(parms[["t_dur"]]*0.333), parms[["tstart"]]+(parms[["t_dur"]]*0.667)),
xmax = c(parms[["tstart"]]+(parms[["t_dur"]]*0.1667), parms[["tstart"]]+(parms[["t_dur"]]*0.53),
parms[["tstart"]]+(parms[["t_dur"]]*0.833)), ymin = 0, ymax = Inf)
p1 <- p1 + geom_rect(data = shade5, inherit.aes = F, aes(ymin = ymin,  ymax = ymax, xmin = xmin, xmax = xmax), alpha = 0.2, fill = "darkblue") +
geom_line(size = 1.1, stat = "identity")  + labs(x =NULL, y = NULL, col = "", title = "Scenario 5") +
theme(plot.title = element_text(size = 20, vjust = 3, hjust = 0.5, face = "bold"), axis.text.x=element_blank(),axis.text.y=element_blank(),
plot.margin=unit(c(0.4,0.4,0.4,0.4),"cm")) +
geom_label(data= datatext, inherit.aes = F, aes(x = x, y = y, label = label), size = 5.5, col = "black", parse = TRUE, fontface = "bold", fill = "white")
p2 <- p2 + theme(axis.text=element_blank(), plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x =NULL, y = NULL, col = "")
p3 <- p3 + theme(axis.text.x =element_text(size=15), axis.text.y=element_blank(), axis.title.x = element_text(size=18),
plot.margin=unit(c(0.4,0.6,0.4,0),"cm")) + labs(x ="Time (Days)", y = NULL, col = "")
}
combplot <- ggarrange(p1,NULL, p2, NULL, p3, nrow = 5, ncol = 1, common.legend = TRUE, legend = "none", align = "v",heights = c(1,-0.02, 0.4,-0.02, 0.5))
dump <- list(combplot, plotdata, max(out$C))
return(dump)
})
}
#Combining all the plots together in a single figure - this represents figure 1A
combplot <- ggarrange(NULL,datalist[[1]][[1]], datalist[[2]][[1]],  datalist[[3]][[1]], datalist[[4]][[1]], datalist[[5]][[1]], NULL, nrow = 1, ncol = 7,
legend = "none", widths = c(0.1,1.2,0.9,0.9,0.9,0.9,0.1))
#Output the peak prevalence and attack rate for each of the 5 scenarios
for(i in 1:5) {
print(datalist[[i]][[2]][datalist[[i]][[2]]$group == "scenario",]
[which.max(datalist[[i]][[2]]$value[datalist[[i]][[2]]$group == "scenario"]),])
print(datalist[[i]][[3]])
}
# Single Parameter Sensitivity Analysis ----------------------------------------------------
#Initial conditions and parameters
init <- c(S = 0.99999, I = 0.00001, R = 0, C = 0)
times <- seq(0,800,by = 1)
parms = c(gamma = 1/GenTime(3, 2.8),
scen = 0,
tstart = 52,
t_dur = 12*7,
cmin = 0.4)
#Specifying the range of parameter values explored in the sensitivity analysis - For trigger, duration and magnitude
sens <- list("tstart" = seq(1,150, by = 1),
"cmin" = seq(0.01,1, by = 0.01),
"t_dur" = seq(1,400, by = 1))
#Creating an empty list to store the data from the sensitivity analyses
senslist <- list()
for(i in 1:3) {
senslist[[i]] <- local({
sensitivity <- sens[[i]] #Creates a dummy variable which takes the name of the explored sensitivity analysis
datasens <- data.frame(matrix(nrow = 0, ncol = 4))
for(k in 1:5) {#Explore each sensitivity analysis parameter for each of the 5 scenarios
data <- cbind(data.frame(matrix(ncol = 4, nrow = length(sensitivity))), "group" = as.factor(seq(1,5)[k]))
parms["scen"] <- seq(1,5)[k]
if(parms["scen"] != 0 && parms["scen"] != 1 && i != 3) { #If not scenario 1 and not the dt sensitivity analysis, then double dt
parms["t_dur"] = 24*7
}
for(j in 1:length(sensitivity)) { #Run the model for each explored parameter value and collect the data
parms[names(sens)[i]] <- sensitivity[j]
out <- data.frame(ode(y = init, func = SIR, times = times, parms = parms))
data[j,1] <- max(out$I)
data[j,2] <- max(out$C)
data[j,3] <- sensitivity[j]
data[j,4] <- names(sens)[i]
}
datasens <- rbind(datasens, data)
if(parms["scen"] == 1 && names(sens)[i] == "t_dur") { #Making the dt senstivity for scenario 1 relative to the other scenarios (double the dt axis)
datasens[,3] <- datasens[,3]*2
}
print(paste0("Sensitivity Test: ", i,", Scenario:", k)) #Progress meter
}
colnames(datasens) <- c("peak", "cum", "sensval", "sens","group")
#Common plotting for peak prevalence and attack rate plots
p1 <- ggplot(datasens, aes(x = sensval, y = peak, col = group)) + geom_line(size = 1.02) + theme_bw() +
scale_y_continuous(limits = c(0,0.150), expand = c(0,0)) + scale_color_manual(values=c("#440154FF", "#3B528BFF", "#21908CFF", "#5DC863FF", "#FDE725FF"))
p2 <- ggplot(datasens, aes(x = sensval, y = cum, col = group)) + geom_line(size = 1.02) + theme_bw() +
scale_y_continuous(limits = c(0,1),expand = c(0,0)) + scale_color_manual(values=c("#440154FF", "#3B528BFF", "#21908CFF", "#5DC863FF", "#FDE725FF"))
#Plot specific alterations to each figure pane
if(names(sens)[i] == "tstart") {
p1 <- p1 + labs(x = NULL, y = "I(t) Peak", col = "Scenario") + scale_x_continuous(limits = c(0,150),expand = c(0, 0))  +
theme(legend.position = "bottom", legend.title = element_text(size=18), legend.text=element_text(size=18),  axis.text.x=element_blank(), axis.text.y=element_text(size=15),
axis.title.y=element_text(size=18),legend.spacing.x = unit(0.3, 'cm'), plot.margin=unit(c(0.1,0.3,0.1,0.3),"cm"))
p2 <- p2 + labs(x = bquote("Trigger Point ("*italic(t[p])*")"), y = "Attack Rate", col = "Scenario") +
theme(legend.position = "bottom", legend.title = element_text(size=18), legend.text=element_text(size=18), axis.text.x=element_text(size=15), axis.text.y=element_text(size=15),
axis.title.y=element_text(size=18),axis.title.x = element_text(size=18), legend.spacing.x = unit(0.3, 'cm'), plot.margin=unit(c(0.1,0.3,0.1,0.3),"cm")) +
scale_x_continuous(limits = c(0,150), expand = c(0, 0))
}
if(names(sens)[i] == "cmin") {
p1 <- p1 + labs(x = NULL, y = NULL, col = "Scenario") + scale_x_continuous(limits = c(0,1),expand = c(0, 0))  +
theme(legend.position = "bottom", legend.title = element_text(size=18), legend.text=element_text(size=18), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.spacing.x = unit(0.3, 'cm'), plot.margin=unit(c(0.1,0.3,0.1,0.3),"cm"))
p2 <- p2 + labs(x = bquote("Lockdown Scaling Factor ("*italic(c[min])*")"), y = NULL, col = "Scenario") +
theme(legend.position = "bottom", legend.title = element_text(size=18), legend.text=element_text(size=18), axis.text.x=element_text(size=15), axis.text.y=element_blank(),
axis.title.x = element_text(size=18), legend.spacing.x = unit(0.3, 'cm'), plot.margin=unit(c(0.1,0.3,0.1,0.3),"cm")) +
scale_x_continuous(limits = c(0,1),expand = c(0, 0))
}
if(names(sens)[i] == "t_dur") {
p1 <- p1 + labs(x = NULL, y = NULL, col = "Scenario") + scale_x_continuous(limits = c(0,400),expand = c(0, 0))  +
theme(legend.position = "bottom", legend.title = element_text(size=18), legend.text=element_text(size=18),  axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.spacing.x = unit(0.3, 'cm'), plot.margin=unit(c(0.1,0.3,0.1,0.3),"cm"))
p2 <- p2 + labs(x = bquote("Relative Duration ("*italic(d[t])*")"), y = NULL, col = "Scenario") +
theme(legend.position = "bottom", legend.title = element_text(size=18), legend.text=element_text(size=18),  axis.text.x=element_text(size=15), axis.text.y=element_blank(),
axis.title.x = element_text(size=18), legend.spacing.x = unit(0.3, 'cm'), plot.margin=unit(c(0.1,0.3,0.1,0.3),"cm")) +
scale_x_continuous(limits = c(0,400),expand = c(0, 0))
}
dump <- list(p1,p2, datasens)
return(dump)
})
}
#Combining the plots together for the sensitivity analysis
combsensplot <- ggarrange(NULL, senslist[[1]][[1]], NULL, senslist[[2]][[1]],  NULL, senslist[[3]][[1]],NULL,
NULL, NULL, NULL, NULL,NULL,NULL, NULL,
NULL, senslist[[1]][[2]], NULL, senslist[[2]][[2]],NULL, senslist[[3]][[2]],NULL,
nrow = 3, ncol = 7, common.legend = TRUE,
legend = "bottom", align = "h", heights = c(1,-0.12,1),
widths = c(0.1,1,0.04,0.9,0.04,0.9,0.1))
combsensplot
#Combining the plots together for the sensitivity analysis
combsensplot <- ggarrange(NULL, senslist[[1]][[1]], NULL, senslist[[2]][[1]],  NULL, senslist[[3]][[1]],NULL,
NULL, NULL, NULL, NULL,NULL,NULL, NULL,
NULL, senslist[[1]][[2]], NULL, senslist[[2]][[2]],NULL, senslist[[3]][[2]],NULL,
nrow = 3, ncol = 7, common.legend = TRUE,
legend = "bottom", align = "h", heights = c(1,-0.12,1),
widths = c(0.1,1,0.04,0.9,0.04,0.9,0.1))
#Output the exact "optimal" parameter space to minimise either the peak or attack rate
for(j in 1:3) {
print(c("tstart1", "cmin", "t_dur")[j])
for(i in 1:5) {
print(senslist[[j]][[3]][senslist[[j]][[3]]$group == i,][which.max(senslist[[j]][[3]]$peak[senslist[[j]][[3]]$group == i]),])
}
}
# CombPlot Test - Final Plotting for Figure 1 -----------------------------------------------------------
#Combining the Trajectory Plots and the Sensitivity Analyses together into Figure 1A and B
figure1 <- ggarrange(NULL, combplot, NULL, combsensplot, nrow = 4, ncol = 1, labels =  c("","A","","B") ,
font.label = c(size = 35), vjust = -0.7, hjust = -0.1, heights = c(0.1,1,0.1,0.9))
ggsave(figure1, filename = "sens_traj_combplot.png", dpi = 300, type = "cairo", width = 13, height = 14, units = "in")
library("deSolve"); library("ggplot2"); library("reshape2"); library("ggpubr")
rm(list=ls())
setwd("C:/Users/amorg/Documents/PhD/nCoV Work/Figures/WriteUpAnalysis/supplementary")
start_time <- Sys.time()
# Common Functions --------------------------------------------------------
#Generation Time Function
GenTime <- function(T2, R0) {
G = T2 * ((R0-1)/log(2))
return(G)
}
# MODELLING SUSTAINABLE REDUCTIONS TO TRANSMISSION AFTER NPIS MODEL - FUNCTIONS ----------------------------------------------------------
#Function describing beta(t) for an initial optimisable NPI followed by a constant, indefinite reduction to transmission
#Note that the chracteristics of the constant reduction to transmission are defined by a start date and a magnitude - contstart and cmin2
combbetamult <- function(scen, time, tstart1, t_dur1, contstart, cmin1, cmin2) {
gamma <- 1/GenTime(3, 2.8)
betascale <- (2.8*gamma)*0.7
if(scen == 0) {
output <-  betascale
}
if(scen == 1) {
output <- ifelse(((time >= (tstart1) & time <= (tstart1 + t_dur1)) | (time >= (contstart) & time <= (contstart + Inf))),
ifelse(time >= (tstart1) & time <= (tstart1 + t_dur1),
betascale*cmin1,
betascale*cmin2),
betascale)
}
if(scen == 2) {
betalin1 <- approxfun(x=c(tstart1, (tstart1 + t_dur1)), y= c(cmin1, 1), method="linear", rule =2)
output <- ifelse((time >= (tstart1) & time <= (tstart1 + t_dur1)) | (time >= (contstart) & time <= (contstart + Inf)),
ifelse(time >= (tstart1) & time <= (tstart1 + t_dur1),
betalin1(time)*betascale,
cmin2*betascale),
betascale)
}
if(scen == 3) {
betalin1 <- approxfun(x=c(tstart1, (tstart1 + t_dur1)), y= c(1, cmin1), method="linear", rule =2)
output <- ifelse(((time >= (tstart1) & time <= (tstart1 + t_dur1)) | (time >= (contstart) & time <= (contstart + Inf))),
ifelse(time >= (tstart1) & time <= (tstart1 + t_dur1),
betalin1(time)*betascale,
cmin2*betascale),
betascale)
}
if(scen == 4) {
betaincdec1 <-approxfun(x=c(tstart1, tstart1+(t_dur1/2), tstart1+t_dur1), y= c(1, cmin1, 1), method="linear", rule =2)
output <- ifelse(((time >= (tstart1) & time <= (tstart1 + t_dur1)) | (time >= (contstart) & time <= (contstart + Inf))),
ifelse(time >= (tstart1) & time <= (tstart1 + t_dur1),
betaincdec1(time)*betascale,
cmin2*betascale),
betascale)
}
if(scen == 5) {
output <- ifelse((time >= tstart1 & time <= tstart1+(t_dur1*0.16667)) | (time >= tstart1+(t_dur1*0.3333) & time <= tstart1+(t_dur1*0.5)) |
(time >= tstart1+(t_dur1*0.6667) & time <= tstart1+(t_dur1*0.83333)) |
(time >= (contstart) & time <= (contstart + Inf)),
ifelse(time >= (tstart1) & time <= (tstart1 + t_dur1),
cmin1*betascale,
cmin2*betascale),
betascale)
}
return(output)
}
#Example plotting of beta(t)
plot(seq(0,200),combbetamult(3, seq(0,200), 20, 2*7, 100, 0.1, 0.5))
#SIR set of ODEs
SIRmulti <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
beta <- combbetamult(scen, time, tstart1, t_dur1, contstart, cmin1, cmin2)
dS = - beta*S*I
dI = beta*S*I- gamma*I
dR = gamma*I
dC = beta*S*I
return(list(c(dS, dI, dR, dC)))
})
}
# MODELLING SUSTAINABLE REDUCTIONS TO TRANSMISSION AFTER NPIS MODEL - Trajectory plots and sensitivity analyses --------------------------------------------------
#Range of values explored in the sensitivity analysis
sens <- list("tstart1" = seq(0,100, by = 1),
"cmin1" = seq(0,1, by = 0.01),
"t_dur1" = seq(1,100, by = 1))
#Initial conditions and parameter values
init <- c(S = 0.99999, I = 0.00001, R = 0, C = 0)
times <- seq(0,300,by = 1)
parms = c(gamma = 1/GenTime(3, 2.8),
scen = 1,
tstart1 = 52,
t_dur1 = 6*7,
contstart = 94,
cmin1 = 0.4,
cmin2 = 0.5)
#Empty list for trajectory plot and sensitivity analysis data storage
outcomelistcmin <- list()
#This analysis loop both conducts a basic trasejectory plot for I(t) and beta(t) and
#Also explores the
for(z in 1:5) { #Run for each of the 5 scenarios and store each trajectory plot separately
outcomelistcmin[[z]] <- local({
parms[["scen"]] <- z #Define the scenario model parameter for each analysis loop
##TRAJECTORY PLOT ANALYSIS
#Run the model and obtain I(t) and beta(t)
outtraj <- cbind(data.frame(ode(y = init, func = SIRmulti, times = times, parms = parms)),
"beta" =  combbetamult(parms[["scen"]], times, parms[["tstart1"]], parms[["t_dur1"]], parms[["contstart"]], parms[["cmin1"]], parms[["cmin2"]]))
#Identify the peak prevalence and attack rate and define a text box for each scenario with these two outcome measures
peak <- round(max(outtraj$I), 3)
cum <- round(max(outtraj$C), 3)
datatext <- data.frame(x = c(150, 150), y = c(0.07, 0.06), label = c(paste0("italic(I)[italic(max)]", " ==", peak),
paste0("italic(I)[italic(c)](italic(t)[italic(max)])", " ==", cum)))
##SENSITIVITY ANALYSIS
#Create an empty dataframe to store sensitivity analysis results
datasens <- data.frame(matrix(nrow = 0, ncol = 5))
for(i in 1:3) { #Run for each parameter explored
sensitivity <- sens[[i]] #Define what parameter you are exploring
data <- data.frame(matrix(nrow = 0, ncol = 5))
for(j in 1:length(sensitivity)) { #For the identified parameter - run the model for the explored range
parms1 <- parms #create a dummy vector for the model parameters
parms1[names(sens)[i]] <- sensitivity[j] #For the explored parameter and value - assign it to the actual parameter vector
out <- data.frame(ode(y = init, func = SIRmulti, times = times, parms = parms1)) #Run the model
data[j,1] <- max(out$I)
data[j,2] <- max(out$C)
data[j,3] <- sensitivity[j]
data[j,4] <- names(sens)[i]
data[j,5] <- as.character(z)
}
datasens <- rbind(datasens, data)
}
colnames(datasens) <- c("peak", "cum", "sensval", "sens", "scen")
print(outtraj) # Progress bar
#Define the period of the intervention for both the NPI (blue) and the constant reduction to transmission (red)
shade <- data.frame(xmin =  c(parms[["tstart1"]], parms[["contstart"]]),
xmax = c(parms[["tstart1"]]+parms[["t_dur1"]], Inf), ymin = c(0,0), ymax = c(Inf,Inf))
#Generic Plotting for the trajectory plot and the beta(t) plot
p1 <- ggplot(data = outtraj, aes(x = time, y = I)) + theme_bw() + scale_y_continuous(limits = c(0,0.075), expand = c(0,0)) +
scale_x_continuous(expand = c(0, 0)) + geom_rect(data = shade, inherit.aes = F, aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax), alpha = 0.2,
fill = c("darkblue", "darkred")) + geom_line(size = 1.1, stat = "identity")
p2 <- ggplot(outtraj, aes(x = time, y = beta))  + theme_bw() + scale_y_continuous(limits = c(0 , 0.3), expand = c(0,0)) +
geom_rect(data = shade, inherit.aes = F, aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax), alpha = 0.2,
fill = c("darkblue", "darkred")) + geom_line(size = 1.1, stat = "identity") +
geom_line(size = 1.1, stat = "identity", col = "darkblue") + scale_x_continuous(expand = c(0, 0))
#Scenario specific plotting for the peak prevalence and attack rate plots (removing axis labels for certain panels)
if(parms[["scen"]] == 1) {
p1 <- p1 + theme(axis.text.x = element_blank(), axis.text.y = element_text(size=13), axis.title.y= element_text(size=15),
axis.title.x = element_blank(), plot.margin=unit(c(0.2,0.4,0.2,0.4),"cm"),
plot.title = element_text(size = 15, vjust = 3, hjust = 0.5, face = "bold")) +
labs(y = "Prevalence", title = paste("Scenario", z), x = "Time") +
geom_label(data= datatext, inherit.aes = F, aes(x = x, y = y, label = label), size = 5.5, col = "black", parse = TRUE, fontface = "bold", fill = "white")
p2 <- p2 + theme(axis.text.x = element_text(size=13), axis.text.y = element_text(size=13), axis.title.y=element_text(size=15),
axis.title.x = element_text(size=15), plot.margin=unit(c(0.2,0.4,0.2,0.4),"cm")) +
labs(y = bquote(italic(beta*"(t)")), x = "Time")
} else {
p1 <- p1 + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.title.y= element_blank(),
axis.title.x = element_blank(), plot.margin=unit(c(0.2,0.4,0.2,0.4),"cm"),
plot.title = element_text(size = 15, vjust = 3, hjust = 0.5, face = "bold")) +
labs(y = bquote(italic(I*"(t)")), title = paste("Scenario", z))+
geom_label(data= datatext, inherit.aes = F, aes(x = x, y = y, label = label), size = 5.5, col = "black", parse = TRUE, fontface = "bold", fill = "white")
p2 <- p2 + theme(axis.text.x = element_text(size=13), axis.text.y = element_blank(), axis.title.y= element_blank(),
axis.title.x = element_text(size=15), plot.margin=unit(c(0.2,0.4,0.2,0.4),"cm")) +
labs(x = "Time")
}
combplot <- ggarrange(p1,p2, nrow = 2, ncol = 1, common.legend = TRUE, legend = "none", align = "v", heights = c(1, 0.6))
dump <- list(combplot, datasens)
#ggarange pase all scenarios together
return(dump)
})
}
#Combining the scenarios for the trajectory + beta(t) plots together
traj <- ggarrange(NULL,outcomelistcmin[[1]][[1]], outcomelistcmin[[2]][[1]], outcomelistcmin[[3]][[1]], outcomelistcmin[[4]][[1]], outcomelistcmin[[5]][[1]],NULL,
nrow = 1, ncol =7, widths = c(0.1,1,0.75,0.75,0.75,0.75,0.1))
#Formatting the sensitivity analysis for plotting
sensitivityanal <- data.frame(matrix(nrow = 0, ncol = 5))
for(i in 1:5) {
sensitivityanal <- rbind(sensitivityanal, outcomelistcmin[[i]][[2]])
}
#Need to plot the sensitivity analysis for the explord parameter for the peak prevalence (p1) and the attack rate (p2) for each scenario
#MAGNITUDE (c_min)
cminpeak <- ggplot(sensitivityanal[sensitivityanal$sens == "cmin1",], aes(x = sensval, y = peak, col = scen)) + geom_line(size = 1.02) + theme_bw()  +
theme(legend.position = "bottom", legend.title = element_text(size=15), legend.text=element_text(size=18), legend.spacing.x = unit(0.3, 'cm'),
axis.text.x=element_blank(), axis.text.y=element_text(size=13), axis.title.y=element_text(size=15), axis.title.x = element_blank(),
plot.margin=unit(c(0.2,0.4,0.2,0.1),"cm")) + labs(y = expression(italic("I"["max"])), col = "Scenario") +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(limits = c(0,0.15),expand = c(0, 0)) +
scale_color_manual(values=c("#440154FF", "#3B528BFF", "#21908CFF", "#5DC863FF", "#FDE725FF"))
cmincum <- ggplot(sensitivityanal[sensitivityanal$sens == "cmin1",], aes(x = sensval, y = cum, col = scen)) + geom_line(size = 1.02) + theme_bw()  +
theme(legend.position = "bottom", legend.title = element_text(size=15), legend.text=element_text(size=18), legend.spacing.x = unit(0.3, 'cm'),
axis.text=element_text(size=13),axis.title.x = element_text(size=15),
plot.margin=unit(c(0.2,0.4,0.2,0.1),"cm")) +
labs(x = expression("Magnitude "~"("~italic("c"["min"]~")")), y = expression(italic("I"["c"]~"("~tmax~")")), col = "Scenario")+
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(limits = c(0,0.75),expand = c(0, 0))+
scale_color_manual(values=c("#440154FF", "#3B528BFF", "#21908CFF", "#5DC863FF", "#FDE725FF"))
#TSTART (t_p)
tstartpeak <- ggplot(sensitivityanal[sensitivityanal$sens == "tstart1",], aes(x = sensval, y = peak, col = scen)) + geom_line(size = 1.02) + theme_bw()  +
theme(legend.position = "bottom", legend.title = element_text(size=15), legend.text=element_text(size=18), legend.spacing.x = unit(0.3, 'cm'),
axis.text.x=element_blank(),axis.text.y=element_blank(), axis.title.y=element_blank(),axis.title.x = element_blank(),
plot.margin=unit(c(0.2,0.4,0.2,0.1),"cm")) +
labs(y = expression(italic("I"["max"])), col = "Scenario") +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(limits = c(0,0.15),expand = c(0, 0))+
scale_color_manual(values=c("#440154FF", "#3B528BFF", "#21908CFF", "#5DC863FF", "#FDE725FF"))
tstartcum <- ggplot(sensitivityanal[sensitivityanal$sens == "tstart1",], aes(x = sensval, y = cum, col = scen)) + geom_line(size = 1.02) + theme_bw()  +
theme(legend.position = "bottom", legend.title = element_text(size=15), legend.text=element_text(size=18), legend.spacing.x = unit(0.3, 'cm'),
axis.text.x=element_text(size=13),axis.text.y=element_blank(), axis.title.y=element_blank(),axis.title.x = element_text(size=15),
plot.margin=unit(c(0.2,0.4,0.2,0.1),"cm")) +
labs(x = expression("Trigger "~"("~italic("t"["p"]~")")), y = expression(italic("I"["c"]~"("~infinity~")")), col = "Scenario")+
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(limits = c(0,0.75),expand = c(0, 0))+
scale_color_manual(values=c("#440154FF", "#3B528BFF", "#21908CFF", "#5DC863FF", "#FDE725FF"))
#DURATION (d_t)
durpeak <- ggplot(sensitivityanal[sensitivityanal$sens == "t_dur1",], aes(x = sensval, y = peak, col = scen)) + geom_line(size = 1.02) + theme_bw()  +
theme(legend.position = "bottom", legend.title = element_text(size=15), legend.text=element_text(size=18), legend.spacing.x = unit(0.3, 'cm'),
axis.text.x=element_blank(),axis.text.y=element_blank(), axis.title.y=element_blank(),axis.title.x = element_blank(),
plot.margin=unit(c(0.2,0.4,0.2,0.1),"cm")) +
labs(y = expression(italic("I"["max"])), col = "Scenario")+
scale_x_continuous(limits = c(0,100), expand = c(0, 0)) + scale_y_continuous(limits = c(0,0.15),expand = c(0, 0))+
scale_color_manual(values=c("#440154FF", "#3B528BFF", "#21908CFF", "#5DC863FF", "#FDE725FF"))
durcum <- ggplot(sensitivityanal[sensitivityanal$sens == "t_dur1",], aes(x = sensval, y = cum, col = scen)) + geom_line(size = 1.02) + theme_bw()  +
theme(legend.position = "bottom", legend.title = element_text(size=15), legend.text=element_text(size=18), legend.spacing.x = unit(0.3, 'cm'),
axis.text.x=element_text(size=13),axis.text.y=element_blank(), axis.title.y=element_blank(),axis.title.x = element_text(size=15),
plot.margin=unit(c(0.2,0.4,0.2,0.1),"cm")) +
labs(x = expression("Duration "~"("~italic("d"["t"]~")")), y = expression(italic("I"["c"]~"("~infinity~")")), col = "Scenario")+
scale_x_continuous(limits = c(0,100), expand = c(0, 0)) + scale_y_continuous(limits = c(0,0.75), expand = c(0, 0))+
scale_color_manual(values=c("#440154FF", "#3B528BFF", "#21908CFF", "#5DC863FF", "#FDE725FF"))
#Creating a unifying plot for the sensitivity analysis
peak <- ggarrange(NULL,cminpeak, tstartpeak, durpeak,NULL,
NULL,cmincum, tstartcum, durcum,NULL,
nrow = 2, ncol =5, common.legend = TRUE, legend = "bottom", align = "v", widths = c(0.1,1,1,1,0.1), heights = c(0.8,1))
#Combining the trajectory/beta(t) + sensitivity analysis plots together
comb <- ggarrange(NULL, traj, NULL,peak, nrow = 4, ncol = 1, heights = c(0.08,1,0.1,0.8),
labels = c("","A","", "B"),font.label = c(size = 25), vjust = -0.3, hjust = -0.4)
#Save the plot to the working directory
ggsave(comb, filename = "5_scenarios_multiadapt_const.png", dpi = 300, type = "cairo", width = 11, height = 10, units = "in")
